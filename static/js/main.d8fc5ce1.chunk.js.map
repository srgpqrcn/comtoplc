{"version":3,"sources":["InputData.js","App.js","serviceWorker.js","index.js"],"names":["InputData","comDataIni","comDataChange","className","id","type","placeholder","ip1","onChange","ip2","port1","port2","App","props","onInputChange","event","input","target","value","ident","console","log","state","length","setState","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8NAceA,G,MAXG,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,WAAWC,EAAkB,EAAlBA,cAC3B,OACI,yBAAKC,UAAU,6CACX,2BAAOA,UAAU,WAAWC,GAAG,WAAWC,KAAK,OAAOC,YAAaL,EAAWM,IAAKC,SAAUN,IAC7F,2BAAOC,UAAU,WAAWC,GAAG,WAAWC,KAAK,OAAOC,YAAaL,EAAWQ,IAAKD,SAAUN,IAC7F,2BAAOC,UAAU,WAAWC,GAAG,aAAaC,KAAK,OAAOC,YAAaL,EAAWS,MAAOF,SAAUN,IACjG,2BAAOC,UAAU,WAAWC,GAAG,aAAaC,KAAK,OAAOC,YAAaL,EAAWU,MAAOH,SAAUN,OCwC9FU,E,kDA7CX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAUVC,cAAgB,SAACC,GACb,IAAMC,EAAQD,EAAME,OAAOC,MACrBC,EAAQJ,EAAME,OAAOb,GAC3BgB,QAAQC,IAAK,EAAKC,MAAMf,IAAIgB,QAE5BH,QAAQC,IAAIF,GACF,aAARA,GAAqC,KAAfH,EAAMO,QAAa,EAAKC,SAAS,CAACjB,IAAIS,IACpD,aAARG,GAAqC,KAAfH,EAAMO,QAAa,EAAKC,SAAS,CAACf,IAAIO,IACpD,eAARG,GAAuC,KAAfH,EAAMO,QAAa,EAAKC,SAAS,CAACd,MAAMM,IACxD,eAARG,GAAuC,KAAfH,EAAMO,QAAa,EAAKC,SAAS,CAACb,MAAMK,KAlBlE,EAAKM,MAAM,CACPf,IAAI,kBACJE,IAAI,kBACJC,MAAM,OACNC,MAAM,QANI,E,qDAiCd,OADJS,QAAQC,IAAII,KAAKH,OAET,kBAAC,WAAD,KACI,yBAAKnB,UAAU,cACX,4DAEA,kBAAC,EAAD,CAAWF,WAZP,CAChBM,IAAI,kBACJE,IAAI,kBACJC,MAAM,OACNC,MAAM,QAQsCT,cAAeuB,KAAKX,sB,GAvCtDY,aCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD2H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,a","file":"static/js/main.d8fc5ce1.chunk.js","sourcesContent":["import React from 'react';\r\nimport './InputData.css';\r\n\r\nconst InputData = ({comDataIni,comDataChange}) =>{\r\n    return (\r\n        <div className='flex flex-column items-center pa2 bg-blue'>\r\n            <input className='InputBox' id='serverip' type='text' placeholder={comDataIni.ip1} onChange={comDataChange} />\r\n            <input className='InputBox' id='clientip' type='text' placeholder={comDataIni.ip2} onChange={comDataChange} />\r\n            <input className='InputBox' id='serverport' type='text' placeholder={comDataIni.port1} onChange={comDataChange} />\r\n            <input className='InputBox' id='clientport' type='text' placeholder={comDataIni.port2} onChange={comDataChange} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default InputData;","import React, {Component, Fragment} from 'react';\r\nimport InputData from './InputData';\r\n\r\nclass App extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            ip1:'255.255.255.000',\r\n            ip2:'255.255.255.000',\r\n            port1:'3000',\r\n            port2:'5000',\r\n        }\r\n        // console.log(\"constructor\");\r\n    }\r\n\r\n    onInputChange = (event)=>{\r\n        const input = event.target.value;\r\n        const ident = event.target.id;\r\n        console.log((this.state.ip1.length))\r\n        // console.log(\"onInputChange\")\r\n        console.log(ident);\r\n       if(ident==='serverip' && input.length===15){this.setState({ip1:input});}\r\n       if(ident==='clientip' && input.length===15){this.setState({ip2:input});}\r\n       if(ident==='serverport' && input.length===15){this.setState({port1:input});}\r\n       if(ident==='clientport' && input.length===15){this.setState({port2:input});}\r\n   \r\n    }\r\n\r\n    render(){\r\n        // console.log(\"render\");\r\n        const dataIni = { \r\n        ip1:'255.255.255.000',\r\n        ip2:'255.255.255.000',\r\n        port1:'3000',\r\n        port2:'5000',\r\n    }\r\n    console.log(this.state)\r\n        return(\r\n            <Fragment>\r\n                <div className='tc bg-blue'>\r\n                    <h1>INDUSTRIAL COMMUNICATION APP</h1>\r\n                    {/* <InputData comDataIni={this.state} comDataChange={this.onInputChange}/> */}\r\n                    <InputData comDataIni={dataIni} comDataChange={this.onInputChange}/>\r\n                </div>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"tachyons\";\n\n\nReactDOM.render(<App />,document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}