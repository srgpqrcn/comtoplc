{"version":3,"sources":["InputData.js","App.js","serviceWorker.js","index.js"],"names":["InputData","comDataIni","comDataChange","className","id","type","placeholder","ip1","onChange","ip2","port1","port2","App","props","onInputChange","event","input","target","value","ident","console","log","state","length","setState","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8NAceA,G,MAXG,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,WAAWC,EAAkB,EAAlBA,cAC3B,OACI,yBAAKC,UAAU,6CACX,2BAAOA,UAAU,WAAWC,GAAG,WAAWC,KAAK,OAAOC,YAAaL,EAAWM,IAAKC,SAAUN,IAC7F,2BAAOC,UAAU,WAAWC,GAAG,WAAWC,KAAK,OAAOC,YAAaL,EAAWQ,IAAKD,SAAUN,IAC7F,2BAAOC,UAAU,WAAWC,GAAG,aAAaC,KAAK,OAAOC,YAAaL,EAAWS,MAAOF,SAAUN,IACjG,2BAAOC,UAAU,WAAWC,GAAG,aAAaC,KAAK,OAAOC,YAAaL,EAAWU,MAAOH,SAAUN,OCwC9FU,E,kDA7CX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAUVC,cAAgB,SAACC,GACb,IAAMC,EAAQD,EAAME,OAAOC,MACrBC,EAAQJ,EAAME,OAAOb,GAC3BgB,QAAQC,IAAK,EAAKC,MAAMf,IAAIgB,QAE5BH,QAAQC,IAAIF,GACF,aAARA,GAAqC,KAAfH,EAAMO,QAAa,EAAKC,SAAS,CAACjB,IAAIS,IACpD,aAARG,GAAqC,KAAfH,EAAMO,QAAa,EAAKC,SAAS,CAACf,IAAIO,IACpD,eAARG,GAAuC,KAAfH,EAAMO,QAAa,EAAKC,SAAS,CAACd,MAAMM,IACxD,eAARG,GAAuC,KAAfH,EAAMO,QAAa,EAAKC,SAAS,CAACb,MAAMK,KAlBlE,EAAKM,MAAM,CACPf,IAAI,kBACJE,IAAI,kBACJC,MAAM,OACNC,MAAM,QANI,E,qDAiCd,OADJS,QAAQC,IAAII,KAAKH,OAET,kBAAC,WAAD,KACI,yBAAKnB,UAAU,cACX,4DAEA,kBAAC,EAAD,CAAWF,WAZP,CAChBM,IAAI,kBACJE,IAAI,kBACJC,MAAM,OACNC,MAAM,QAQsCT,cAAeuB,KAAKX,sB,GAvCtDY,aCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD2H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,a","file":"static/js/main.d8fc5ce1.chunk.js","sourcesContent":["import React from 'react';\r\nimport './InputData.css';\r\n\r\nconst InputData = ({comDataIni,comDataChange}) =>{\r\n    return (\r\n        <div className='flex flex-column items-center pa2 bg-blue'>\r\n            <input className='InputBox' id='serverip' type='text' placeholder={comDataIni.ip1} onChange={comDataChange} />\r\n            <input className='InputBox' id='clientip' type='text' placeholder={comDataIni.ip2} onChange={comDataChange} />\r\n            <input className='InputBox' id='serverport' type='text' placeholder={comDataIni.port1} onChange={comDataChange} />\r\n            <input className='InputBox' id='clientport' type='text' placeholder={comDataIni.port2} onChange={comDataChange} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default InputData;","import React, {Component, Fragment} from 'react';\r\nimport InputData from './InputData';\r\n\r\nclass App extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            ip1:'255.255.255.000',\r\n            ip2:'255.255.255.000',\r\n            port1:'3000',\r\n            port2:'5000',\r\n        }\r\n        // console.log(\"constructor\");\r\n    }\r\n\r\n    onInputChange = (event)=>{\r\n        const input = event.target.value;\r\n        const ident = event.target.id;\r\n        console.log((this.state.ip1.length))\r\n        // console.log(\"onInputChange\")\r\n        console.log(ident);\r\n       if(ident==='serverip' && input.length===15){this.setState({ip1:input});}\r\n       if(ident==='clientip' && input.length===15){this.setState({ip2:input});}\r\n       if(ident==='serverport' && input.length===15){this.setState({port1:input});}\r\n       if(ident==='clientport' && input.length===15){this.setState({port2:input});}\r\n   \r\n    }\r\n\r\n    render(){\r\n        // console.log(\"render\");\r\n        const dataIni = { \r\n        ip1:'255.255.255.000',\r\n        ip2:'255.255.255.000',\r\n        port1:'3000',\r\n        port2:'5000',\r\n    }\r\n    console.log(this.state)\r\n        return(\r\n            <Fragment>\r\n                <div className='tc bg-blue'>\r\n                    <h1>INDUSTRIAL COMMUNICATION APP</h1>\r\n                    {/* <InputData comDataIni={this.state} comDataChange={this.onInputChange}/> */}\r\n                    <InputData comDataIni={dataIni} comDataChange={this.onInputChange}/>\r\n                </div>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport \"tachyons\";\r\n\r\n\r\nReactDOM.render(<App />,document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}